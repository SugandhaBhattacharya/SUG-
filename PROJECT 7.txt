// Java Program to Check if a Given Class is an Inner Class

// Importing package where Modifier is defined
import java.lang.reflect.Modifier;

class A {

	// Main driver method
	public static void main(String[] args)
	{

		// Creating as GFG class object
		A gfg = new GFG();

		// Creating a InnerClass object
		InnerClass innerClass = A.new InnerClass();

		// Creating a Static Nested Class object
		StaticNestedClass statNested
			= new StaticNestedClass();

		// getClass() method of an object returns a
		// java.lang.Class instance representing the class
		// of the object
		Class classInstance1 = innerClass.getClass();
		Class classInstance2 = statNested.getClass();

		// Checking if the given classes are nested

		// getEnclosinglClass() of Class instance returns a
		// class object representing the immediate enclosing
		// class of the instance

		boolean isNested1
			= classInstance1.getEnclosingClass() != null;
		// classInstance1() method returns a Class object

		// If the specified class is a top-level class, then
		// it would returns null

		boolean isNested2
			= classInstance2.getEnclosingClass() != null;

		// Check if the given classes are static

		// getModifiers() method of a class returns the
		// modifiers of the class encoded as an integer

		// Modifiers.isStatic returns true if the class
		// has a static modifier elsereturns false
		boolean isStatic1 = Modifier.isStatic(
			classInstance1.getModifiers());
		boolean isStatic2 = Modifier.isStatic(
			classInstance2.getModifiers());

		// If the given classes are nested and non-static,
		// then given classes are surely inner classes

		// Display message
		System.out.println(
			"Is innerClass an inner class object? : "
			+ (isNested1 && !isStatic1));

		// Display message
		System.out.println(
			"Is statNested an inner class object? : "
			+ (isNested2 && !isStatic2));
	}

	// Inner Class
	class InnerClass {
	}

	// Static nested class
	static class StaticNestedClass {
	}
}
